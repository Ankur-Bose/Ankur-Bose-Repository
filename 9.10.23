#include<stdio.h>
#include<stdlib.h>
struct stack
{
	int size;
	int top;
	int *arr;
};

int empty(struct stack *s)
{
	if(s->top == -1)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

int isFull(struct stack *s)
{
	if(s->top==s->size-1)
	{
		return 0;
	}
	return 1;	
}

void push(struct stack *sp, int val)
{
	if(isFull(sp))
	{
		printf("Cannot push any item further");
	}
	else
	{
		sp->top++;
		sp->arr[sp->top]=val;
	}
}

int pop(struct stack *s)
{
	if(empty(s))
	{
		printf("Cannot pop");
		return 1;
	}
	else
	{
		int val=s->arr[s->top];
		s->top--;
		return val;
	}
}

int peek(struct stack* sp,int i)
{
	int arrayIndex=sp->top -i+1;
	if(arrayIndex<0)
	{
		printf("Not a valid pos\n");
		return 1;
	}
	else
	{
		return sp->arr[arrayIndex];
	}
}
int main()
{
	struct stack s;
	s.size=5;
	s.top=-1;
	s.arr=(int*)malloc(s.size*sizeof(int));
	int check=isFull(&s);
	if(check==0)
	printf("Full");
	else
	printf("Not Full");
	push(&s,5);
	push(&s,10);
	peek(&s,s.top);
	return 0;
}





















#include<stdio.h>
#include<stdlib.h>
 
struct stack{
    int size ;
    int top;
    int * arr;
};
 
int isEmpty(struct stack* ptr){
    if(ptr->top == -1){
            return 1;
        }
        else{
            return 0;
        }
}
 
int isFull(struct stack* ptr){
    if(ptr->top == ptr->size - 1){
        return 1;
    }
    else{
        return 0;
    }
}
 
void push(struct stack* ptr, int val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
int pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        int val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
 
int peek(struct stack* sp, int i){
    int arrayInd = sp->top -i + 1;
    if(arrayInd < 0){
        printf("Not a valid position for the stack\n");
        return -1;
    }
    else{
        return sp->arr[arrayInd];
    }
}
int main(){
    struct stack *sp = (struct stack *) malloc(sizeof(struct stack));
    sp->size = 50;
    sp->top = -1;
    sp->arr = (int *) malloc(sp->size * sizeof(int));
    printf("Stack has been created successfully\n");
 
    printf("Before pushing, Full: %d\n", isFull(sp));
    printf("Before pushing, Empty: %d\n", isEmpty(sp));
       
    return 0;
}
