#include<stdio.h>
#include<stdlib.h>
 
struct stack{
    int size ;
    int top;
    int * arr;
};
 
int isEmpty(struct stack* ptr){
    if(ptr->top == -1){
            return 1;
        }
        else{
            return 0;
        }
}
 
int isFull(struct stack* ptr){
    if(ptr->top == ptr->size - 1){
        return 1;
    }
    else{
        return 0;
    }
}
 
void push(struct stack* ptr, int val){
    if(isFull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
int pop(struct stack* ptr){
    if(isEmpty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        int val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
 
int peek(struct stack* sp, int i){
    int arrayInd = sp->top -i + 1;
    if(arrayInd < 0){
        printf("Not a valid position for the stack\n");
        return -1;
    }
    else{
        return sp->arr[arrayInd];
    }
}
int main(){
    struct stack *sp = (struct stack *) malloc(sizeof(struct stack));
    sp->size = 50;
    sp->top = -1;
    sp->arr = (int *) malloc(sp->size * sizeof(int));
    printf("Stack has been created successfully\n");
 
    printf("Before pushing, Full: %d\n", isFull(sp));
    printf("Before pushing, Empty: %d\n", isEmpty(sp));
    
    push(sp,5);
    push(sp,10);
    push(sp,15);
    push(sp,20);
    printf("Before popping \n");
    for(int i=1;i<=sp->top+1;i++)
    {
    	printf("%d \n",peek(sp,i));
	}
	
	pop(sp);
	pop(sp);
	printf("After popping \n");
    for(int i=1;i<=sp->top+1;i++)
    {
    	printf("%d \n",peek(sp,i));
	}

}






















// C code to convert infix to postfix expression 

  
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 

  
#define MAX_EXPR_SIZE 100 

  
// Function to return precedence of operators 

int precedence(char operator) 
{ 

    switch (operator) { 

    case '+': 

    case '-': 

        return 1; 

    case '*': 

    case '/': 

        return 2; 

    case '^': 

        return 3; 

    default: 

        return -1; 

    } 
} 

  
// Function to check if the scanned character  
// is an operator 

int isOperator(char ch) 
{ 

    return (ch == '+' || ch == '-' || ch == '*' || ch == '/'

            || ch == '^'); 
} 

  
// Main functio to convert infix expression 
// to postfix expression 

char* infixToPostfix(char* infix) 
{ 

    int i, j; 

    int len = strlen(infix); 

    char* postfix = (char*)malloc(sizeof(char) * (len + 2)); 

    char stack[MAX_EXPR_SIZE]; 

    int top = -1; 

  

    for (i = 0, j = 0; i < len; i++) { 

        if (infix[i] == ' ' || infix[i] == '\t') 

            continue; 

        

        // If the scanned character is operand 

        // add it to the postfix expression 

        if (isalnum(infix[i])) { 

            postfix[j++] = infix[i]; 

        } 

        

        // if the scanned character is '(' 

        // push it in the stack 

        else if (infix[i] == '(') { 

            stack[++top] = infix[i]; 

        } 

        

        // if the scanned character is ')' 

        // pop the stack and add it to the  

        // output string until empty or '(' found 

        else if (infix[i] == ')') { 

            while (top > -1 && stack[top] != '(') 

                postfix[j++] = stack[top--]; 

            if (top > -1 && stack[top] != '(') 

                return "Invalid Expression"; 

            else

                top--; 

        } 

        

        // If the scanned character is an operator 

        // push it in the stack 

        else if (isOperator(infix[i])) { 

            while (top > -1 

                   && precedence(stack[top]) 

                          >= precedence(infix[i])) 

                postfix[j++] = stack[top--]; 

            stack[++top] = infix[i]; 

        } 

    } 

  

    // Pop all remaining elements from the stack 

    while (top > -1) { 

        if (stack[top] == '(') { 

            return "Invalid Expression"; 

        } 

        postfix[j++] = stack[top--]; 

    } 

    postfix[j] = '\0'; 

    return postfix; 
} 

  
// Driver code 

int main() 
{ 

    char infix[MAX_EXPR_SIZE] = "a+b*(c^d-e)^(f+g*h)-i"; 

    

    // Function call 

    char* postfix = infixToPostfix(infix); 

    printf("%s\n", postfix); 

    free(postfix); 

    return 0; 
}
    return 0;
