14.08.23(Monday)
(need to convert it to switch)
#include<stdio.h>

void *swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a=*b;
	*b=temp;
}
//bubble sort
void bubble(int *arr, int n)
{
	int i,j,temp;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-i-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
			}
		}
	}
}
//insertion sort
void insertion(int *arr, int n)
{
	int i,j,key,flag=0;
	for(i=0;i<n;i++)
	{
		key=arr[i];
		j=i-1;
		while(j>=0&&key<arr[j])
		{
			arr[j+1]=arr[j];
			--j;
		}
		arr[j+1]=key;
	}
}
//selection sort
void selection(int *arr, int n)
{
	int i,j,min_idx;
	for(i=0;i<n-1;i++)
	{
		min_idx=i;
		for(j=i+1;j<n;j++)
		{
		if(arr[j]<arr[min_idx])
		min_idx=j;
		}
		swap(&arr[min_idx],&arr[i]);
	}
}

void mergeSort(int *arr, int n,int lb, int ub)
{
	int mid;
	if(lb<ub)
	{
		mid = (lb+ub)/2;
		mergeSort(arr,n,lb,mid);
		mergeSort(arr,n,mid+1,ub);
		merge(arr,lb,ub,mid);
	}
}

void merge(int *arr, int lb, int ub, int mid)
{
	int i,j,k,b[100];
	i=lb;
	j=mid+1;
	k=lb;
	while(i<=mid && j<=ub)
	{
		if(arr[i]<=arr[j])
		{
			b[k]=arr[i];
			i++;
		}
		else
		{
			b[k]=arr[j];
			j++;
		}
		k++;
	}
	while(i<=mid)
	{
		b[k]=arr[i];
		i++;
		k++;
	}
	while(j<=ub)
	{
		b[k]=arr[j];
		j++;
		k++;
	}
	k=lb;
	while(k<=ub)
	{
		arr[k]=b[k];
		k++;
	}
}
void display(int *arr, int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		printf("%d\n",arr[i]);
	}
	printf("\n");
}
int main()
{
	int arr[100], n, i;
	printf("Enter the size of array \n");
	scanf("%d",&n);
	printf("Enter the elements in an array \n");
	for(i=0;i<n;i++)
	{
		scanf("%d",&arr[i]);
	}
	printf("The updated array is \n");
	mergeSort(arr,n,0,n-1);
	display(arr,n);
	return 0;
}
































#include<stdio.h>
#define table_size 10

int hash1(int key)
{
	return key%table_size;
}

/*int hash2(int key)
{
	return (key*2+1)%table_size;
}*/

int main()
{
	printf("Hlo");
	int arr[]={72,27,30,24,63,81,34};
	int hash_table[table_size]={0};
	int check=0;
	//static int hash_table[table_size];
	for(int i=0;i<10;i++)
	{
		int index1=hash1(arr[i]);
		hash_table[index1]=arr[i];
		//int index2=hash2(arr[i]);
		//hash_table[index2]=arr[i];
		}
		//int index2=hash2(arr[i]);
		/*if(hash_table[index1]!=0)
		{
			index1=(arr[i])%table_size;
		}
		hash_table[index1]=arr[i];
		/*if(hash_table[index2]!=0)
		{
			index2=(arr[i])%table_size;
		}
		hash_table[index2]=arr[i];
	}*/
	printf("Hash Table \n");
	for(int i=0;i<10;i++)
	{
		if(hash_table[i]==81)
		check=1;
		printf("%d: %d\n",i,hash_table[i]);
	}
	if(check==1)
	printf("Present ");
	else
	printf("Not present ");
	return 0;
}
